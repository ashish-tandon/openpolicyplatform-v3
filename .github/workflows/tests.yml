name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
      - name: Backend unit tests (fast)
        run: |
          cd backend
          export DATABASE_URL=sqlite+pysqlite:///:memory:
          pytest -q tests || true
      - name: Scraper unit tests (if present)
        run: |
          if [ -d services/scraper/tests ]; then pytest -q services/scraper/tests || true; fi
      - name: Lint (flake8)
        run: |
          pip install flake8
          flake8 backend || true
      - name: Type-check (mypy)
        run: |
          pip install mypy
          mypy backend || true
      - name: Check docs links
        run: bash scripts/check-docs-links.sh
      - name: Export OpenAPI
        run: bash scripts/export-openapi.sh
      - name: Build Docker images (if Dockerfile present)
        run: |
          if [ -f backend/Dockerfile ]; then docker build -t local/api:ci -f backend/Dockerfile backend; fi
          if [ -f web/Dockerfile ]; then docker build -t local/web:ci -f web/Dockerfile web || true; fi
      - name: Validate K8s manifests (dry-run)
        run: |
          echo "Validating k8s manifests"
          if command -v kubectl >/dev/null 2>&1; then kubectl apply --dry-run=client -f deploy/k8s/scrapers; fi

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'integration')
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: openpolicy
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
      - name: Backend legacy/integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openpolicy
        run: |
          cd backend
          pytest -q || true
